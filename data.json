{
    "assignment": [
        {
            "id": "1",
            "title": "Game of Life",
            "totalPoints": 300,
            "description": "Implement a function called conway_game that takes two parameters: a 2D array of 0s and 1s, and an integer t. The function\nshould use the 2D array as the start state to Conway's Game of Life, and return the state of the game after t steps. \nThe size and shape of the 2d array will vary, but you can assume that it will have at least one row and one column.\n\nConways's Game of Life\n\nThe \u201cgame\u201d is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.\n\nHow the game works \nBecause the Game of Life is built on a grid of nine squares, every cell has eight neighboring cells,as shown in the given figure. \nA given cell (i, j) in the simulation is accessed on a grid [i][j], where i and j are the row and column indices, respectively.\nThe value of a given cell at a given instant of time depends on the state of its neighbors at the previous time step.\nConway\u2019s Game of Life has four rules. \n\nIf a cell is ON and has fewer than two neighbors that are ON, it turns OFF\nIf a cell is ON and has either two or three neighbors that are ON, it remains ON.\nIf a cell is ON and has more than three neighbors that are ON, it turns OFF.\nIf a cell is OFF and has exactly three neighbors that are ON, it turns ON."
        }
    ],
    "rubric": [
        {
            "name": "Program Correctness",
            "levels": [
                {
                    "description": "No errors, the program always works correctly and meets the specification(s).",
                    "score": 100
                },
                {
                    "description": "Minor details of the program specification are not met, program functions incorrectly for some inputs.",
                    "score": 90
                },
                {
                    "description": "Significant details of the specification are not met, program often exhibits incorrect behavior.",
                    "score": 80
                },
                {
                    "description": "Program does not run successfully for any inputs.",
                    "score": 0
                }
            ]
        },
        {
            "name": "Readability",
            "levels": [
                {
                    "description": "PEP 8 style guidelines are followed, code is clean, understandable, and well-organized.",
                    "score": 100
                },
                {
                    "description": "PEP 8 style guidelines are mostly followed. Minor issues with variable naming, structure of functions, or general organization.",
                    "score": 90
                },
                {
                    "description": "At least one major issue with coding style.",
                    "score": 80
                },
                {
                    "description": "Multiple major issues with coding style",
                    "score": 0
                }
            ]
        },
        {
            "name": "Documentation",
            "levels": [
                {
                    "description": "We can figure out what your program does just by reading your comments.",
                    "score": 100
                },
                {
                    "description": "One or two places that could benefit from comments are missing them, or the code is overly commented.",
                    "score": 90
                },
                {
                    "description": "Complicated lines or sections of code uncommented or lacking meaningful comments.",
                    "score": 80
                },
                {
                    "description": "No comments",
                    "score": 0
                }
            ]
        }
    ],
    "submissions": [
        {
            "name": "Lindsay Walton",
            "email": "lindsay.walton@example.com",
            "submittedOn": "04/27/2023 - 10:23am",
            "status": "Graded",
            "image": "https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
            "submission": "# The function  conway_game  takes two parameters:  grid , a 2D array of 0s and 1s representing the initial state of the game, and  t , an integer representing the number of time steps to simulate. \n# The function first determines the number of rows and columns in the grid, and then iterates through each cell in the grid for each time step. For each cell, it counts the number of neighboring cells that are ON (i.e. have a value of 1). Based on the rules of Conway's Game of Life, it sets the value of the cell in the next time step accordingly. \n# The function returns the final state of the game after  t  time steps. \n# Note that the input grid should be a valid 2D array of 0s and 1s, and the integer  t  should be non-negative\ndef conway_game(grid, t):\n    rows = len(grid)\n    cols = len(grid[0])\n    for k in range(t):\n        new_grid = [[0 for j in range(cols)] for i in range(rows)]\n        for i in range(rows):\n            for j in range(cols):\n                count = 0\n                for r in range(i-1, i+2):\n                    for c in range(j-1, j+2):\n                        if (r != i or c != j) and r >= 0 and c >= 0 and r < rows and c < cols:\n                            count += grid[r][c]\n                if grid[i][j] == 1 and (count < 2 or count > 3):\n                    new_grid[i][j] = 0\n                elif grid[i][j] == 0 and count == 3:\n                    new_grid[i][j] = 1\n                else:\n                    new_grid[i][j] = grid[i][j]\n        grid = new_grid\n    return grid\n\n# Sample input\ngrid = [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 0]\n]\nt = 3\n\n# Call the conway_game function\nnew_grid = conway_game(grid, t)\n\n# Output the final state of the game\nfor row in new_grid:\n    print(row)",
            "grade": [
                {
                    "name": "Program Correctness",
                    "score": 100,
                    "assessment": "The student's submission successfully performs Conway's Game of Life with correct interpretation of its rules, demonstrating exemplary program correctness. The code effectively handles varied inputs, edge cases, confirming its robustness and accuracy across different conditions. The quality of work presented in the program aligns with the highest standards of the program correctness criterion.",
                    "inferredScore": null
                },
                {
                    "name": "Readability",
                    "score": 90,
                    "assessment": "The submission demonstrates a commendable adherence to the Python's PEP 8 style guidelines and the code is structured with clarity. However, some minor aspects such as naming of certain variables could be improved for better descriptiveness. Moreover, while the overall organization of the code is well conceived, a move towards a more modular design would have made it more readable and simple, elevating it to an even higher standard.",
                    "inferredScore": null
                },
                {
                    "name": "Documentation",
                    "score": 100,
                    "assessment": "The student's submission excels in Documentation with meaningful, well-presented comments accurately describing the functionality of the code sections. The program operations are clear just from reading these comments, and no sections lack the necessary explanatory remarks. While ensuring comprehensibility, the code also avoids information overload, maintaining equilibrium between necessity and excess.",
                    "inferredScore": null
                }
            ]
        },
        {
            "name": "Jordan Grimsley",
            "email": "J0r_de_man13@example.com",
            "submittedOn": "04/26/2023 - 5:56pm",
            "status": "Graded",
            "image": "",
            "submission": "def conway_game(array, t):\n    \"\"\"\n    Simulates Conway's Game of Life for a given number of steps.\n\n    Args:\n        array (List[List[int]]): The initial state of the game as\n                                a 2D array of 0s and 1s.\n        t (int): The number of steps to simulate.\n\n    Returns:\n        List[List[int]]: The state of the game after t steps.\n    \"\"\"\n\n    rows = len(array)\n    cols = len(array[0])\n\n    def count_live_neighbors(i, j):\n        \"\"\"\n        Counts the number of live neighbors for a given cell.\n\n        Args:\n            i (int): Row index of the cell.\n            j (int): Column index of the cell.\n\n        Returns:\n            int: The count of live neighbors.\n        \"\"\"\n        count = 0\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == 0 and dy == 0:\n                    continue\n                ni = i + dx\n                nj = j + dy\n                if 0 <= ni < rows and 0 <= nj < cols and array[ni][nj] == 1:\n                    count += 1\n        return count\n\n    # Perform the game simulation for t steps\n    for _ in range(t):\n        # Create a new array to hold the next state of the game\n        next_array = [[0] * cols for _ in range(rows)]\n\n        for i in range(rows):\n            for j in range(cols):\n                live_neighbors = count_live_neighbors(i, j)\n\n                if array[i][j] == 1:\n                    # Cell is ON\n                    if live_neighbors < 2 or live_neighbors > 3:\n                        next_array[i][j] = 0  # Cell turns OFF\n                    else:\n                        next_array[i][j] = 1  # Cell remains ON\n                else:\n                    # Cell is OFF\n                    if live_neighbors == 3:\n                        next_array[i][j] = 1  # Cell turns ON\n\n        # Update the array to the next state\n        array = next_array\n\n    return array\n",
            "grade": [
                {
                    "name": "Program Correctness",
                    "score": 100,
                    "assessment": "The student's submission successfully performs Conway's Game of Life with correct interpretation of its rules, demonstrating exemplary program correctness. The code effectively handles varied inputs, edge cases, confirming its robustness and accuracy across different conditions. The quality of work presented in the program aligns with the highest standards of the program correctness criterion.",
                    "inferredScore": null
                },
                {
                    "name": "Readability",
                    "score": 90,
                    "assessment": "The submission demonstrates a commendable adherence to the Python's PEP 8 style guidelines and the code is structured with clarity. However, some minor aspects such as naming of certain variables could be improved for better descriptiveness. Moreover, while the overall organization of the code is well conceived, a move towards a more modular design would have made it more readable and simple, elevating it to an even higher standard.",
                    "inferredScore": null
                },
                {
                    "name": "Documentation",
                    "score": 100,
                    "assessment": "While there were many comments, not all were useful. More importantly the program could have used more comments explaining the algorithm, so the documentation score is high, but not 100",
                    "inferredScore": 90
                }
            ]
        }
    ]
}